// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	types "weather-or-not-bot/internal/types"

	gomock "github.com/golang/mock/gomock"
	tgbotapi "gopkg.in/telegram-bot-api.v4"
)

// MockBotClient is a mock of BotClient interface.
type MockBotClient struct {
	ctrl     *gomock.Controller
	recorder *MockBotClientMockRecorder
}

// MockBotClientMockRecorder is the mock recorder for MockBotClient.
type MockBotClientMockRecorder struct {
	mock *MockBotClient
}

// NewMockBotClient creates a new mock instance.
func NewMockBotClient(ctrl *gomock.Controller) *MockBotClient {
	mock := &MockBotClient{ctrl: ctrl}
	mock.recorder = &MockBotClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotClient) EXPECT() *MockBotClientMockRecorder {
	return m.recorder
}

// ListenForWebhook mocks base method.
func (m *MockBotClient) ListenForWebhook(webhook string) tgbotapi.UpdatesChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenForWebhook", webhook)
	ret0, _ := ret[0].(tgbotapi.UpdatesChannel)
	return ret0
}

// ListenForWebhook indicates an expected call of ListenForWebhook.
func (mr *MockBotClientMockRecorder) ListenForWebhook(webhook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForWebhook", reflect.TypeOf((*MockBotClient)(nil).ListenForWebhook), webhook)
}

// Send mocks base method.
func (m *MockBotClient) Send(msg tgbotapi.MessageConfig) (tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", msg)
	ret0, _ := ret[0].(tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockBotClientMockRecorder) Send(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBotClient)(nil).Send), msg)
}

// MockForecastClient is a mock of ForecastClient interface.
type MockForecastClient struct {
	ctrl     *gomock.Controller
	recorder *MockForecastClientMockRecorder
}

// MockForecastClientMockRecorder is the mock recorder for MockForecastClient.
type MockForecastClientMockRecorder struct {
	mock *MockForecastClient
}

// NewMockForecastClient creates a new mock instance.
func NewMockForecastClient(ctrl *gomock.Controller) *MockForecastClient {
	mock := &MockForecastClient{ctrl: ctrl}
	mock.recorder = &MockForecastClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForecastClient) EXPECT() *MockForecastClientMockRecorder {
	return m.recorder
}

// GetForecast mocks base method.
func (m *MockForecastClient) GetForecast(ctx context.Context, loc *types.UserCoordinates, period string) (*types.FullWeatherReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForecast", ctx, loc, period)
	ret0, _ := ret[0].(*types.FullWeatherReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForecast indicates an expected call of GetForecast.
func (mr *MockForecastClientMockRecorder) GetForecast(ctx, loc, period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForecast", reflect.TypeOf((*MockForecastClient)(nil).GetForecast), ctx, loc, period)
}

// MockUserDataRepo is a mock of UserDataRepo interface.
type MockUserDataRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserDataRepoMockRecorder
}

// MockUserDataRepoMockRecorder is the mock recorder for MockUserDataRepo.
type MockUserDataRepoMockRecorder struct {
	mock *MockUserDataRepo
}

// NewMockUserDataRepo creates a new mock instance.
func NewMockUserDataRepo(ctrl *gomock.Controller) *MockUserDataRepo {
	mock := &MockUserDataRepo{ctrl: ctrl}
	mock.recorder = &MockUserDataRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDataRepo) EXPECT() *MockUserDataRepoMockRecorder {
	return m.recorder
}

// AddUserIfNotExists mocks base method.
func (m *MockUserDataRepo) AddUserIfNotExists(ctx context.Context, user *tgbotapi.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserIfNotExists", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserIfNotExists indicates an expected call of AddUserIfNotExists.
func (mr *MockUserDataRepoMockRecorder) AddUserIfNotExists(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserIfNotExists", reflect.TypeOf((*MockUserDataRepo)(nil).AddUserIfNotExists), ctx, user)
}

// MockBotUIRepo is a mock of BotUIRepo interface.
type MockBotUIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBotUIRepoMockRecorder
}

// MockBotUIRepoMockRecorder is the mock recorder for MockBotUIRepo.
type MockBotUIRepoMockRecorder struct {
	mock *MockBotUIRepo
}

// NewMockBotUIRepo creates a new mock instance.
func NewMockBotUIRepo(ctrl *gomock.Controller) *MockBotUIRepo {
	mock := &MockBotUIRepo{ctrl: ctrl}
	mock.recorder = &MockBotUIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotUIRepo) EXPECT() *MockBotUIRepoMockRecorder {
	return m.recorder
}

// GetBackToMainMenuKeyboard mocks base method.
func (m *MockBotUIRepo) GetBackToMainMenuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackToMainMenuKeyboard")
	ret0, _ := ret[0].(tgbotapi.ReplyKeyboardMarkup)
	return ret0
}

// GetBackToMainMenuKeyboard indicates an expected call of GetBackToMainMenuKeyboard.
func (mr *MockBotUIRepoMockRecorder) GetBackToMainMenuKeyboard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackToMainMenuKeyboard", reflect.TypeOf((*MockBotUIRepo)(nil).GetBackToMainMenuKeyboard))
}

// GetDaysKeyboard mocks base method.
func (m *MockBotUIRepo) GetDaysKeyboard() tgbotapi.ReplyKeyboardMarkup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaysKeyboard")
	ret0, _ := ret[0].(tgbotapi.ReplyKeyboardMarkup)
	return ret0
}

// GetDaysKeyboard indicates an expected call of GetDaysKeyboard.
func (mr *MockBotUIRepoMockRecorder) GetDaysKeyboard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaysKeyboard", reflect.TypeOf((*MockBotUIRepo)(nil).GetDaysKeyboard))
}

// GetDaysOrHoursKeyboard mocks base method.
func (m *MockBotUIRepo) GetDaysOrHoursKeyboard() tgbotapi.ReplyKeyboardMarkup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaysOrHoursKeyboard")
	ret0, _ := ret[0].(tgbotapi.ReplyKeyboardMarkup)
	return ret0
}

// GetDaysOrHoursKeyboard indicates an expected call of GetDaysOrHoursKeyboard.
func (mr *MockBotUIRepoMockRecorder) GetDaysOrHoursKeyboard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaysOrHoursKeyboard", reflect.TypeOf((*MockBotUIRepo)(nil).GetDaysOrHoursKeyboard))
}

// GetHoursKeyboard mocks base method.
func (m *MockBotUIRepo) GetHoursKeyboard() tgbotapi.ReplyKeyboardMarkup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHoursKeyboard")
	ret0, _ := ret[0].(tgbotapi.ReplyKeyboardMarkup)
	return ret0
}

// GetHoursKeyboard indicates an expected call of GetHoursKeyboard.
func (mr *MockBotUIRepoMockRecorder) GetHoursKeyboard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHoursKeyboard", reflect.TypeOf((*MockBotUIRepo)(nil).GetHoursKeyboard))
}

// GetMainMenuKeyboard mocks base method.
func (m *MockBotUIRepo) GetMainMenuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainMenuKeyboard")
	ret0, _ := ret[0].(tgbotapi.ReplyKeyboardMarkup)
	return ret0
}

// GetMainMenuKeyboard indicates an expected call of GetMainMenuKeyboard.
func (mr *MockBotUIRepoMockRecorder) GetMainMenuKeyboard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainMenuKeyboard", reflect.TypeOf((*MockBotUIRepo)(nil).GetMainMenuKeyboard))
}

// MockLocationRepo is a mock of LocationRepo interface.
type MockLocationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLocationRepoMockRecorder
}

// MockLocationRepoMockRecorder is the mock recorder for MockLocationRepo.
type MockLocationRepoMockRecorder struct {
	mock *MockLocationRepo
}

// NewMockLocationRepo creates a new mock instance.
func NewMockLocationRepo(ctrl *gomock.Controller) *MockLocationRepo {
	mock := &MockLocationRepo{ctrl: ctrl}
	mock.recorder = &MockLocationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationRepo) EXPECT() *MockLocationRepoMockRecorder {
	return m.recorder
}

// GetCoordinatesByCityName mocks base method.
func (m *MockLocationRepo) GetCoordinatesByCityName(ctx context.Context, locationName string) (*tgbotapi.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoordinatesByCityName", ctx, locationName)
	ret0, _ := ret[0].(*tgbotapi.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoordinatesByCityName indicates an expected call of GetCoordinatesByCityName.
func (mr *MockLocationRepoMockRecorder) GetCoordinatesByCityName(ctx, locationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinatesByCityName", reflect.TypeOf((*MockLocationRepo)(nil).GetCoordinatesByCityName), ctx, locationName)
}

// MockUserLocationRepo is a mock of UserLocationRepo interface.
type MockUserLocationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserLocationRepoMockRecorder
}

// MockUserLocationRepoMockRecorder is the mock recorder for MockUserLocationRepo.
type MockUserLocationRepoMockRecorder struct {
	mock *MockUserLocationRepo
}

// NewMockUserLocationRepo creates a new mock instance.
func NewMockUserLocationRepo(ctrl *gomock.Controller) *MockUserLocationRepo {
	mock := &MockUserLocationRepo{ctrl: ctrl}
	mock.recorder = &MockUserLocationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLocationRepo) EXPECT() *MockUserLocationRepoMockRecorder {
	return m.recorder
}

// AddUserLocationByCoordinates mocks base method.
func (m *MockUserLocationRepo) AddUserLocationByCoordinates(ctx context.Context, userID int, loc *tgbotapi.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserLocationByCoordinates", ctx, userID, loc)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserLocationByCoordinates indicates an expected call of AddUserLocationByCoordinates.
func (mr *MockUserLocationRepoMockRecorder) AddUserLocationByCoordinates(ctx, userID, loc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserLocationByCoordinates", reflect.TypeOf((*MockUserLocationRepo)(nil).AddUserLocationByCoordinates), ctx, userID, loc)
}

// GetUserRecentLocation mocks base method.
func (m *MockUserLocationRepo) GetUserRecentLocation(ctx context.Context, userID int) (*types.UserCoordinates, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRecentLocation", ctx, userID)
	ret0, _ := ret[0].(*types.UserCoordinates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRecentLocation indicates an expected call of GetUserRecentLocation.
func (mr *MockUserLocationRepoMockRecorder) GetUserRecentLocation(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRecentLocation", reflect.TypeOf((*MockUserLocationRepo)(nil).GetUserRecentLocation), ctx, userID)
}

// SaveUserLocationName mocks base method.
func (m *MockUserLocationRepo) SaveUserLocationName(ctx context.Context, userID int, locationName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserLocationName", ctx, userID, locationName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserLocationName indicates an expected call of SaveUserLocationName.
func (mr *MockUserLocationRepoMockRecorder) SaveUserLocationName(ctx, userID, locationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserLocationName", reflect.TypeOf((*MockUserLocationRepo)(nil).SaveUserLocationName), ctx, userID, locationName)
}

// MockReportFormatter is a mock of ReportFormatter interface.
type MockReportFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockReportFormatterMockRecorder
}

// MockReportFormatterMockRecorder is the mock recorder for MockReportFormatter.
type MockReportFormatterMockRecorder struct {
	mock *MockReportFormatter
}

// NewMockReportFormatter creates a new mock instance.
func NewMockReportFormatter(ctrl *gomock.Controller) *MockReportFormatter {
	mock := &MockReportFormatter{ctrl: ctrl}
	mock.recorder = &MockReportFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportFormatter) EXPECT() *MockReportFormatterMockRecorder {
	return m.recorder
}

// FormatDays mocks base method.
func (m *MockReportFormatter) FormatDays(ctx context.Context, report *types.FullWeatherReport, days int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatDays", ctx, report, days)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatDays indicates an expected call of FormatDays.
func (mr *MockReportFormatterMockRecorder) FormatDays(ctx, report, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatDays", reflect.TypeOf((*MockReportFormatter)(nil).FormatDays), ctx, report, days)
}

// FormatHours mocks base method.
func (m *MockReportFormatter) FormatHours(ctx context.Context, report *types.FullWeatherReport, hours int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatHours", ctx, report, hours)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatHours indicates an expected call of FormatHours.
func (mr *MockReportFormatterMockRecorder) FormatHours(ctx, report, hours interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatHours", reflect.TypeOf((*MockReportFormatter)(nil).FormatHours), ctx, report, hours)
}

// FormatNow mocks base method.
func (m *MockReportFormatter) FormatNow(ctx context.Context, report *types.FullWeatherReport) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatNow", ctx, report)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatNow indicates an expected call of FormatNow.
func (mr *MockReportFormatterMockRecorder) FormatNow(ctx, report interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatNow", reflect.TypeOf((*MockReportFormatter)(nil).FormatNow), ctx, report)
}
